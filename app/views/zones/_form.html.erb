<h2>Seleccionar Zona</h2>
<%= form_with(model: zone, local: true) do |form| %>
<%= form.hidden_field :coordinates, :id => "coordinates" %>
<div style="padding-bottom: 20px; padding-top: 20px;">
  <table>
    <tr>
      <td style="padding-right: 5px;">
        <label for="cmbbxProjects"><%= t('project') %></label>
      </td>
      <td><%= form.select :project_id, Project.all.collect { |m| [ m.name, m.id ] }, {}, :id => "cmbbxProjects" %></td>
      <td>
        <button type="button" data-toggle="modal" data-target="#zoneModal" id="bttnShowModal">Ajustar Puntos</button>
      </td>
      <td>
        <button type="button" id="bttnGenerateZone">Generar Zona</button>
      </td>
      <td>
        <button type="button" id="bttnClearCanvas">Borrar Zona</button>
      </td>
      <td style="padding-left: 70px;">
        <%= form.submit 'Guardar Zona' %>
      </td>
    </tr>
  </table>
</div>
<div>
  <table>
    <tbody>
      <tr>
        <td valign="top">
          <!-- <div id="canvas" style="overflow:hidden;position:relative;width:1430px;height:882px;border:#999999 1px solid; background-image: url('/assets/floor.png')"></div> -->
          <canvas id="floorCanvas" width="1430px" height="882px" style="position:relative;margin-left:0px;margin-top:0px;"></canvas>
          <div id="oldposx" style="display:none;"></div>
          <div id="oldposy" style="display:none;"></div>
          <div id="posx" style="display:none;"></div>
          <div id="posy" style="display:none;"></div>
        </td>
      </tr>
    </tbody>
  </table>
</div>
  <div id="myimg"></div>
<div id="zoneModal" class="modal fade" role="dialog">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal">&times;</button>
        <h4 class="modal-title"><%= t('maps.assign') %></h4>
      </div>
      <div class="modal-body">
        <table id="pointsTable">
          <tbody>
            <tr id="header">
              <td>
                <label>#</label>
              </td>
              <td>
                <label>X</label>
              </td>
              <td>
                <label>Y</label>
              </td>
            </tr>
          </tbody>
        </table>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" id="bttnAcceptModal"><%= t('accept') %></button>
        <button type="button" class="btn btn-default" data-dismiss="modal"><%= t('cancel') %></button>
      </div>
    </div>
  </div>
</div>
<% end %>

<script type="text/javascript">

$(document).ready(function () {

  var condition = 1;
  var points = []; //holds the mousedown points
  var canvas = document.getElementById('floorCanvas');
  this.isOldIE = (window.G_vmlCanvasManager);
  $(function () {

    if (this.isOldIE) {
      G_vmlCanvasManager.initElement(floorCanvas);
    }
    var ctx = canvas.getContext('2d');

    ctx.lineWidth = 5;
    ctx.strokeStyle = "#080aa2";

    var imageObj = new Image();

    function init() {
      canvas.addEventListener('mousedown', mouseDown, false);
      canvas.addEventListener('mouseup', mouseUp, false);
      canvas.addEventListener('mousemove', mouseMove, false);
    }

    // // Draw  image onto the canvas
    imageObj.onload = function () {
      ctx.drawImage(imageObj, 0, 0);
    };
    imageObj.src = '/assets/floor.png';

    // // Switch the blending mode
    ctx.globalCompositeOperation = 'destination-over';
    //
    // //mousemove event
    $('#floorCanvas').mousemove(function (e) {
      if (condition == 1) {

        //ctx.beginPath();

        $('#posx').html(e.offsetX);
        $('#posy').html(e.offsetY);
      }
    });
    //mousedown event
    $('#floorCanvas').mousedown(function (e) {
      if (condition == 1) {

        if (e.which == 1) {
          var pointer = $('<span class="spot">').css({
            'position': 'absolute',
            'background-color': '#089800',
            'width': '5px',
            'height': '5px',
            'top': e.pageY,
            'left': e.pageX

          });
          //store the points on mousedown
          points.push(e.pageX, e.pageY);

          //console.log(points);

          ctx.globalCompositeOperation = 'source-over';
          var oldposx = $('#oldposx').html();
          var oldposy = $('#oldposy').html();
          var posx = $('#posx').html();
          var posy = $('#posy').html();
          ctx.beginPath();
          ctx.moveTo(oldposx, oldposy);
          if (oldposx != '') {
            ctx.lineTo(posx, posy);
            ctx.stroke();
            ctx.closePath();
            console.log("stoke");
          }
          $('#oldposx').html(e.offsetX);
          $('#oldposy').html(e.offsetY);
        }
        $(document.body).append(pointer);
        $('#posx').html(e.offsetX);
        $('#posy').html(e.offsetY);
      } //condition
    });

    $('#bttnGenerateZone').click(function () {
      condition = 0;

      //  var pattern = ctx.createPattern(imageObj, "repeat"); ctx.fillStyle = pattern;
      $('.spot').each(function () {
        $(this).remove();

      })
      //clear canvas var context = canvas.getContext("2d");

      ctx.clearRect(0, 0, 1430, 882);
      ctx.beginPath();
      ctx.width = 1430;
      ctx.height = 882;
      ctx.globalCompositeOperation = 'destination-over';
      //draw the polygon
      setTimeout(function () {

        //console.log(points);
        var offset = $('#floorCanvas').offset();
        //console.log(offset.left,offset.top);
        var minX = 10000;
        var minY = 10000;
        var maxX = -10000;
        var maxY = -10000;
        for (var i = 0; i < points.length; i += 2) {
          var x = parseInt(jQuery.trim(points[i]));
          var y = parseInt(jQuery.trim(points[i + 1]));

          // if (i == 0) {
          //   ctx.moveTo(x - offset.left, y - offset.top);
          // } else {
          //   ctx.lineTo(x - offset.left, y - offset.top);
          // }

          if (x < minX) {
            minX = x;
          }
          if (y < minY) {
            minY = y;
          }
          if (x > maxX) {
            maxX = x;
          }
          if (y > maxY) {
            maxY = y;
          }
          //console.log(points[i],points[i+1])
        }

        var width = maxX - minX;
        var height = maxY - minY;

        ctx.save();
        ctx.clearRect(0, 0, 1430, 882);
        ctx.beginPath();
        ctx.moveTo(points[0], points[1]);
        // for (var i = 1; i < points.length; i++) {
        //   var p = points[i];
        //   ctx.lineTo(points[i].x, points[i].y);
        // }
        for (var i = 2; i < points.length; i += 2) {
          var x = parseInt(jQuery.trim(points[i]));
          var y = parseInt(jQuery.trim(points[i + 1]));
            ctx.lineTo(x, y);
        }
        ctx.closePath();
        ctx.clip();
        ctx.drawImage(imageObj, 0, 0);
        ctx.restore();

        // create a new canvas
        var c = document.createElement('canvas');
        var cx = c.getContext('2d');

        // resize the new canvas to the size of the clipping area
        c.width = width;
        c.height = height;

        // draw the clipped image from the main canvas to the new canvas
        cx.drawImage(canvas, minX, minY, width, height, 0, 0, width, height);

        // create a new Image() from the new canvas
        var clippedImage = new Image();
        clippedImage.onload = function() {
          // append the new image to the page
          var img = document.getElementById('myimg');
          img.appendChild(clippedImage);
        }
        clippedImage.src = c.toDataURL();


        // clear the previous points
        points.length = 0;

        // redraw the image on the main canvas for further clipping
        drawImage(0.25);

        // if (this.isOldIE) {
        //
        //   ctx.fillStyle = '';
        //   ctx.fill();
        //   var fill = $('fill', floorCanvas).get(0);
        //   fill.color = '';
        //   fill.src = element.src;
        //   fill.type = 'tile';
        //   fill.alignShape = false;
        // } else {
        //   var pattern = ctx.createPattern(imageObj, "repeat");
        //   ctx.fillStyle = pattern;
        //   ctx.fill();

          // var dataurl = canvas.toDataURL("image/png");
          //
          // //upload to server (if needed)
          // var xhr = new XMLHttpRequest();
          // //
          // xhr.open('POST', 'upload.php', false);
          // xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
          // var files = dataurl;
          // var data = new FormData();
          // var myprod = $("#pid").val();
          // data = 'image=' + files;
          // xhr.send(data);
          // if (xhr.status === 200) {
          //   console.log(xhr.responseText);
          //   $('#myimg').html('<img src="upload/' + xhr.responseText + '.png"/>');
          // }

        //}
      }, 20);

    });

    // redraw the image at the specified opacity
    function drawImage(alpha) {
      ctx.clearRect(0, 0, 1430, 882);
      ctx.globalAlpha = alpha;
      ctx.drawImage(imageObj, 0, 0);
      ctx.globalAlpha = 1.00;
    }

    // }
  });

});


</script>
