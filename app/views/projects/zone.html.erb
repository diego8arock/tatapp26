<h2><%= t('zones.generate') %></h2>
<%= form_with(model: @project, local: true) do |form| %>
  <%= form.hidden_field :coordinates, :id => "coordinates" %>
  <div style="padding-bottom: 20px; padding-top: 20px;">
    <table>
      <tr>
        <td style="padding-right: 5px;">
          <label for="cmbbxProjects"><%= t('project') %></label>
        </td>
        <td><%= form.select :project_id, Project.all.collect { |m| [ m.name, m.id ] }, {}, :id => "cmbbxProjects" %>        
        </td>
        <td>
          <button type="button" class="btn btn-primary" id="bttnGenerateZone" data-toggle="modal" data-target="#zoneModal" id="bttnShowModal"><%= t('zones.generate') %></button>
        </td>
      </tr>
    </table>
  </div>
  <div>
    <table>
      <tbody>
        <tr>
          <td valign="top">
            <canvas id="floorCanvas" width="1430px" height="882px" style="position:relative;margin-left:0px;margin-top:0px;"></canvas>
            <div id="oldposx" style="display:none;"></div>
            <div id="oldposy" style="display:none;"></div>
            <div id="posx" style="display:none;"></div>
            <div id="posy" style="display:none;"></div>
            <%= form.hidden_field :image_es, :id => "image_es" %>
            <%= form.hidden_field :image_en, :id => "image_en" %>
            <%= form.hidden_field :image_zone, :id => "image_zone" %>
          </td>
        </tr>
      </tbody>
    </table>
  </div>
  <div id="primg"></div>
  <div id="zoneModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <button type="button" class="close" data-dismiss="modal">&times;</button>
          <h4 class="modal-title"><%= t('zones.confirm') %></h4>
        </div>
        <div class="modal-body">
          <div id="myimg"></div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-default" id="bttnAcceptModal"><%= t('save') %></button>
          <button type="button" class="btn btn-default" data-dismiss="modal" id="bttnCancelModal"><%= t('cancel') %></button>
        </div>
      </div>
    </div>
  </div>
<% end %>

<script type="text/javascript">

$(document).ready(function () {

  var condition = 1;
  var points = []; //holds the mousedown points
  var canvas = document.getElementById('floorCanvas');
  this.isOldIE = (window.G_vmlCanvasManager);
  $(function () {

    if (this.isOldIE) {
      G_vmlCanvasManager.initElement(floorCanvas);
    }
    var ctx = canvas.getContext('2d');

    ctx.lineWidth = 5;
    ctx.strokeStyle = "#080aa2";

    var imageObj = new Image();

    function init() {
      canvas.addEventListener('mousedown', mouseDown, false);
      canvas.addEventListener('mouseup', mouseUp, false);
      canvas.addEventListener('mousemove', mouseMove, false);
    }

    // // Draw  image onto the canvas
    imageObj.onload = function () {
      ctx.drawImage(imageObj, 0, 0);
    };
    imageObj.src = '/assets/floor.png';

    // // Switch the blending mode
    ctx.globalCompositeOperation = 'destination-over';
    //
    // //mousemove event
    $('#floorCanvas').mousemove(function (e) {
      if (condition == 1) {

        //ctx.beginPath();

        $('#posx').html(e.offsetX);
        $('#posy').html(e.offsetY);
      }
    });
    //mousedown event
    $('#floorCanvas').mousedown(function (e) {
      if (condition == 1) {

        if (e.which == 1) {
          var pointer = $('<span class="spot">').css({
            'position': 'absolute',
            'background-color': '#089800',
            'width': '5px',
            'height': '5px',
            'top': e.pageY,
            'left': e.pageX

          });
          //store the points on mousedown
          points.push(e.pageX, e.pageY);

          //console.log(points);

          ctx.globalCompositeOperation = 'source-over';
          var oldposx = $('#oldposx').html();
          var oldposy = $('#oldposy').html();
          var posx = $('#posx').html();
          var posy = $('#posy').html();
          ctx.beginPath();
          ctx.moveTo(oldposx, oldposy);
          if (oldposx != '') {
            ctx.lineTo(posx, posy);
            ctx.stroke();
            ctx.closePath();
            console.log("stoke");
          }
          $('#oldposx').html(e.offsetX);
          $('#oldposy').html(e.offsetY);
        }
        $(document.body).append(pointer);
        $('#posx').html(e.offsetX);
        $('#posy').html(e.offsetY);
      } //condition
    });

    $('#bttnAcceptModal').click(function () {
        sendImageToSaveProject($('#image_es').val(), 'es');
        sendImageToSaveProject($('#image_en').val(), 'en');
        sendImageToSaveZone($('#image_zone').val());
        document.location.href = "/zoneproject";
    });

    $('#bttnCancelModal').click(function () {
        document.location.href = "/zoneproject";
    });

    $('#bttnGenerateZone').click(function () {
      condition = 0;

      //  var pattern = ctx.createPattern(imageObj, "repeat"); ctx.fillStyle = pattern;
      $('.spot').each(function () {
        $(this).remove();

      })
      //clear canvas var context = canvas.getContext("2d");

      ctx.clearRect(0, 0, 1430, 882);
      ctx.beginPath();
      ctx.width = 1430;
      ctx.height = 882;
      ctx.globalCompositeOperation = 'destination-over';
      //draw the polygon
      setTimeout(function () {

        //console.log(points);
        var offset = $('#floorCanvas').offset();
        //console.log(offset.left,offset.top);
        var minX = 10000;
        var minY = 10000;
        var maxX = -10000;
        var maxY = -10000;
        for (var i = 0; i < points.length; i += 2) {
          var x = parseInt(jQuery.trim(points[i])) - offset.left;
          var y = parseInt(jQuery.trim(points[i + 1])) - offset.top;

           if (i == 0) {
             ctx.moveTo(x, y);
           } else {
             ctx.lineTo(x, y);
           }
           points[i] = x;
           points[i + 1] = y;

          if (x < minX) {
            minX = x;
          }
          if (y < minY) {
            minY = y;
          }
          if (x > maxX) {
            maxX = x;
          }
          if (y > maxY) {
            maxY = y;
          }
          //console.log(points[i],points[i+1])
        }

        var width = maxX - minX;
        var height = maxY - minY;

        ctx.save();
        ctx.clearRect(0, 0, 1430, 882);
        ctx.beginPath();
        ctx.moveTo(points[0], points[1]);
        // for (var i = 1; i < points.length; i++) {
        //   var p = points[i];
        //   ctx.lineTo(points[i].x, points[i].y);
        // }
        for (var i = 2; i < points.length; i += 2) {
          var x = parseInt(jQuery.trim(points[i]));
          var y = parseInt(jQuery.trim(points[i + 1]));
            ctx.lineTo(x, y);
        }
        ctx.closePath();
        ctx.clip();
        ctx.drawImage(imageObj, 0, 0);
        ctx.restore();

        // create a new canvas
        var c = document.createElement('canvas');
        var cx = c.getContext('2d');

        // resize the new canvas to the size of the clipping area
        c.width = width;
        c.height = height;

        // draw the clipped image from the main canvas to the new canvas
        cx.drawImage(canvas, minX, minY, width, height, 0, 0, width, height);

        // create a new Image() from the new canvas
        var clippedImage = new Image();
        clippedImage.onload = function() {
          // append the new image to the page
          var img = document.getElementById('myimg');
          img.appendChild(clippedImage);
        }
        clippedImage.src = c.toDataURL();
        $('#image_zone').val(c.toDataURL());


        // clear the previous points
        points.length = 0;
        
        //draw project image mofified
        ctx.clearRect(0, 0, 1430, 882);
        ctx.globalAlpha = 0.5;
        ctx.fillStyle = 'blue';
        ctx.fill();

        ctx.beginPath();
        ctx.globalAlpha = 0.9;
        ctx.arc(370, 440, 6, 0, 2 * Math.PI, false);
        ctx.fillStyle = 'black';
        ctx.fill();

        ctx.beginPath();
        ctx.globalAlpha = 0.8;
        ctx.arc(370, 440, 15, 0, 2 * Math.PI, false);
        ctx.fillStyle = 'blue';
        ctx.fill();

        ctx.globalAlpha = 1;

        var locale = I18n.locale;
        I18n.locale = "en";
        //text
        ctx.beginPath();
        ctx.font = 'italic 30pt Calibri';
        ctx.fillStyle = 'black';
        ctx.fillText(I18n.t('current_position'), 600, 310);

        //line
        ctx.beginPath();
        ctx.moveTo(385, 430);
        ctx.lineTo(595, 315);
        ctx.lineWidth = 4;

        // set line color
        ctx.strokeStyle = '#ff0000';
        ctx.stroke();
        ctx.closePath();

        //Draw image with changes
        ctx.drawImage(imageObj, 0, 0);
        ctx.globalAlpha = 1.00;

        // create a new Image() from the new canvas
        /*var projectImage = new Image();
        projectImage.onload = function() {
          // append the new image to the page
          var img = document.getElementById('primg');
          img.appendChild(projectImage);
        }
        projectImage.id = "projectImage";
        projectImage.src = canvas.toDataURL();
        sendImageToSaveProject(canvas.toDataURL(), I18n.locale);*/
        $('#image_en').val(canvas.toDataURL());

        //Draw image spanish
        ctx.clearRect(600, 250, 700, 310);
        //text
        ctx.beginPath();
        I18n.locale = "es";
        ctx.fillStyle = 'black';
        ctx.fillText(I18n.t('current_position'), 600, 310);
        ctx.closePath();

        //Draw image with changes
        ctx.drawImage(imageObj, 0, 0);
        ctx.globalAlpha = 1.00;

        // create a new Image() from the new canvas
        /*var projectImageEs = new Image();
        projectImageEs.onload = function() {
          // append the new image to the page
          var img = document.getElementById('primg');
          img.appendChild(projectImageEs);
        }
        projectImageEs.id = "projectImageEs";
        projectImageEs.src = canvas.toDataURL();
        sendImageToSaveProject(canvas.toDataURL(), I18n.locale);*/
        $('#image_es').val(canvas.toDataURL());
        
        //Restore locale value
        I18n.locale = locale;
        // redraw the image on the main canvas for further clipping
        drawImage(0.25);

      }, 20);

    });

    // redraw the image at the specified opacity
    function drawImage(alpha) {
      ctx.clearRect(0, 0, 1430, 882);
      ctx.globalAlpha = alpha;
      ctx.drawImage(imageObj, 0, 0);
      ctx.globalAlpha = 1.00;
    }


    function sendImageToSaveProject(dataURL, locale) {
      // Get our file
      var file= dataURLtoBlob(dataURL);
      // Create new form data
      var fd = new FormData();
      // Append our Canvas image file to the form data
      fd.append("image", file);
      fd.append("project_id", $("#cmbbxProjects").val());
      fd.append("locale_name", locale);
      // And send it
      $.ajax({
        url: "/projects/"+ $("#cmbbxProjects").val() + "/image",
        type: "post",
        data: fd,
        processData: false,
        contentType: false,
        success: function(data) {
          console.log(I18n.t('zones.image_saved'));
        },
        error: function(jqXHR, textStatus, errorThrown){
          alert(errorThrown);
        }
      });
    }

    function sendImageToSaveZone(dataURL) {
      // Get our file
      var file= dataURLtoBlob(dataURL);
      // Create new form data
      var fd = new FormData();
      // Append our Canvas image file to the form data
      fd.append("image", file);
      fd.append("project_id", $("#cmbbxProjects").val());
      // And send it
      $.ajax({
        url: "/projects/"+ $("#cmbbxProjects").val() + "/zoneimage",
        type: "post",
        data: fd,
        processData: false,
        contentType: false,
        success: function(data) {
          console.log(I18n.t('zones.image_saved'));
          alert(I18n.t('zones.image_saved'));
        },
        error: function(jqXHR, textStatus, errorThrown){
          alert(errorThrown);
        }
      });
    }

    // Convert dataURL to Blob object
    function dataURLtoBlob(dataURL) {
      // Decode the dataURL
      var binary = atob(dataURL.split(',')[1]);
      // Create 8-bit unsigned array
      var array = [];
      for(var i = 0; i < binary.length; i++) {
          array.push(binary.charCodeAt(i));
      }
      // Return our Blob object
      return new Blob([new Uint8Array(array)], {type: 'image/png'});
    }
    // }
  });

});


</script>
